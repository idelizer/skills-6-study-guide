Runtime
-------

1. When calculating the Big O notation for a particular algorithm, it's necessary
to consider the length of time it takes for the algorithm to run as the algorithm's
workload approaches infinity. What determines the **workload** of figuring out
whether your box of animal crackers contains an elephant?

O(n) --> you must look at every cracker in the box once to determine whether it is an alephant


2. Order the following runtimes in descending order of efficiency (that is,
	fastest runtimes first, slowest last) as `n` approaches infinity:

   - O(log n)

   - O(n^2)

   - O(n log n)

   - O(n)

   - O(2^n)

   - O(1)

fastest <--------------------------------> slowest
  O(1)  O(log n)  O(n)  O(n logn)  O(n^2)  O(2^n)


In the file called `runtime.py`, there are 5 functions.

1. What is the runtime for `string_compare`? 
  len --> O(1)?     (does it twice, so O(2))
  for --> O(n)      (runs through every item in list)
  if in --> O(n)?   (runs through every item once since array?)  
  total: O(2n) --> O(n)

2. What is the runtime for `has_exotic_animals`?
  if in --> O(n)?    (does twice, so O(2n)- doesn't check both at same time)
  total: O(n)

3. What is the runtime for `sum_zero_1`?
  set conversion --> O(n)   (goes through once)
  for --> O(n) for loop x 
  conditional --> O(1)      (fast lookup for sets)
  total: O(2n) --> O(n)

4. What is the runtime for `sum_zero_2`?
  for --> O(n)  
  nested for --> O(n) 
  checking equality --> O(1)
  total: O(n^2) "quadratic"

5. What is the runtime for `sum_zero_3`?
  for --> O(n)  
  nested for --> O(n) 
  checking equality, in x2 --> O(3n)?   (check list twice)
  total: O(n^2)
  ANSWER: O(n^3) --> where is 3rd power coming from??


Stacks and Queues
-----------------

1. In the following cases, would a stack or queue be a more appropriate data
	structure?

  - The process of loading and unloading pallets onto a flatbed truck
    --> stack

  - Putting bottle caps on bottles of beer as they roll down an assembly line
    --> queue


2. Describe two more situations where a queue would be an appropriate data
	structure.
  --> waiting in line at the gorcery store, dealing with support tickets
  ANSWER: completing orders in a restaurant

3. Describe two more situations where a stack would be an appropriate data
	structure.
  --> taking eating pancakes off the top of a pile, double parking
  ANSWER: eating pringles!!


Linked Lists
------------

1. Given the linked list shown in the instructions, which are the nodes? What is
the data for each node? Where is the head? Where is the tail? (Be as specific as
possible --- exactly which parts of the diagram correspond to each part? Arrows?
Boxes? Text?)

Node: a box with attributes(data and next) and a pointer 
eg    |"apple"|next| --> 
The data for each of the 3 nodes are: "apple", "berry," "cherry"
The head attribute of the entire list points to the first node containing "apple"
The tail is the last existing node, so "cherry"

2. What's the difference between doubly- and singly-linked lists?
Singly linked lists are one directional; they have a next attribute or a pointer.
Doubly linked lists are bidirectional; they keep track of the next and previous nodes- two pointers.

3. Why is it faster to append to a linked list if we keep track of the `tail`
as an attribute?
We don't have to loop through the list to find the last node. We keep track of the last node as an attribute for the whole list.
ANSWER: changes runtime from O(n) to O(1)!

Trees
-----

1. What would be the best data structure to use for keeping track of nodes to
	visit during a Breadth First Search of a tree?
  --> Queue

2. What would be the best data structure to use for keeping track of nodes to
	visit during a Depth First Search of a tree?
  --> Stack
